#version 120

/*
 Copyright (C) 2010-2017 Kristian Duske
 
 This file is part of TrenchBroom.
 
 TrenchBroom is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 TrenchBroom is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with TrenchBroom. If not, see <http://www.gnu.org/licenses/>.
 */

uniform bool ApplyTinting;
uniform vec4 TintColor;
uniform float ShadeLevel;
uniform float Alpha;

varying vec4 vertexColor;
varying vec4 modelCoordinates;
varying vec3 modelNormal;
varying vec3 viewVector;

void main() {
    gl_FragColor = vertexColor;

    if (ApplyTinting) {
        float brightnessCorrection = 1.0 / max(max(abs(TintColor.r), abs(TintColor.g)), abs(TintColor.b));
        gl_FragColor = vec4((gl_FragColor.rgb + TintColor.rgb * TintColor.a) * 0.5f, gl_FragColor.a);
        gl_FragColor = clamp(brightnessCorrection * gl_FragColor, 0.0, 1.0);
    } else {
        gl_FragColor.a = Alpha;
    }

    // angular dimming ( can be controlled with dimStrength )
    float dimStrength = ShadeLevel;
    float angleDim = dot(normalize(viewVector), normalize(modelNormal)) * dimStrength + (1.0 - dimStrength);

    gl_FragColor.rgb *= angleDim;
}
